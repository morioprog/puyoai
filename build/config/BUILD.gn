# if(MSVC)
#     add_compile_options("/MD$<$<CONFIG:Debug>:d>")
#     add_compile_options("/MP")  # Compile in parallel
#     # Suppress some warnigs about implicit conversions.
#     add_compile_options("/wd4244")  # from uint64 to int
#     add_compile_options("/wd4267")  # from size_t to int
#     add_compile_options("/wd4267")  # cut constant number
#     add_compile_options("/wd4800")  # from int to bool
#     add_compile_options("/wd4819")  # using unknown character code
#     add_compile_options("/wd4996")  # non standard namespace usage
# else()
#     if(CYGWIN AND (${CMAKE_CXX_COMPILER_ID} MATCHES "GNU"))
#         set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu++11" CACHE STRING "" FORCE)
#     else()
#         set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11" CACHE STRING "" FORCE)
#     endif()
# 
#     if(${CMAKE_BUILD_TYPE} STREQUAL "Debug")
#         add_compile_options("-Werror")
#     endif()
# 
# endif()
# 
# if(MSVC)
#   add_definitions(-DGOOGLE_GLOG_DLL_DECL=)
#   add_definitions(-DNOMINMAX)
# endif()

config("global") {
    include_dirs = [
        "//src"
    ]

     defines = [
        "SRC_DIR=\"" + rebase_path("//src", root_build_dir) + "\"",
        "DATA_DIR=\"" + rebase_path("//data", root_build_dir) + "\"",
        "TESTDATA_DIR=\"" + rebase_path("//test_resources", root_build_dir) + "\"",
    ]

    if (is_posix) {
        # always include build/build_config.h
        cflags = [
            "-include", rebase_path("//src/build/build_config.h", root_build_dir),
            "-Wall",
            "-Wextra",
        ]

        cflags_cc = [
            "-std=c++14",
        ]
    }

    if (is_win) {
        cflags = [
            "/FI", "build/build_config.h",  # always include build_config.h
            "/std:c++14",
        ]

        ldflags = [
            "/SUBSYSTEM:CONSOLE",  # needs this if main function is main() instead of WinMain.
        ]

        defines += [
            "NOMINMAX",
            "WIN32_LEAN_AND_MEAN",
        ]
    }
}

config("debug") {
}

config("release") {
    defines = [
        "NDEBUG",
        "NOINLINE_UNLESS_RELEASE="
    ]
}

config("asan") {
    if (is_posix) {
        cflags = [ "-fsanitize=address" ]
        ldflags = [ "-fsanitize=address" ]
    }
}

config("use_tcp") {
    defines = [
        "USE_TCP"
    ]
}

config("use_httpd") {
    defines = [
        "USE_HTTPD"
    ]
}

config("use_libcurl") {
    defines = [
        "USE_LIBCURL"
    ]
}

# TODO(mayah): Use pkg-config instead of writing the path directly.
# TODO(mayah): Support SDL on Windows?
if (use_gui) {
    config("with_sdl2") {
        defines = [
            "USE_SDL2"
        ]

        include_dirs = [
            "/usr/include/SDL2",
        ]

        if (is_win) {
            libs = [
                "SDL2.lib",
                "SDL2main.lib",
                "SDL2_ttf.lib",
                "SDL2_image.lib",
            ]
        } else {
            ldflags = [
                "-lSDL2",
                "-lSDL2_ttf",
                "-lSDL2_image",
            ]
        }
    }
}

config("with_curl") {
    ldflags = [ "-lcurl" ]
}

config("with_usb") {
    ldflags = [ "-lusb-1.0" ]
}

config("with_ffmpeg") {
    ldflags = [
        "-lswscale",
        "-lavformat",
        "-lavcodec",
        "-lavutil",
    ]
}

config("with_httpd") {
    ldflags = [
        "-lmicrohttpd"
    ]
}





