# TODO(mayah): Update ac_analyzer.cc not to use deprecated APIs.
# add_compile_options("-Wno-deprecated-declarations")

import ("//src/capture/capture.gni")

static_library("capture") {
    sources = [
        "analyzer.cc",
        "analyzer.h",
        "analyzer_result_drawer.cc",
        "analyzer_result_drawer.h",
        "capture.cc",
        "capture.h",
        "color.cc",
        "color.h",
        "images_source.cc",
        "images_source.h",
        "monitor.h",
        "movie_source.cc",
        "movie_source.h",
        "movie_source_key_listener.cc",
        "movie_source_key_listener.h",
        "real_color_field.cc",
        "real_color_field.h",
        "source.cc",
        "source.h",
    ]

    cflags = [
        "-Wno-deprecated-declarations",
    ]

    deps = [
        "//src/core",
        "//src/gui",
        "//third_party/gflags",
        "//src/capture/recognition",
    ]

    configs += [
        ":game_monitor",
        "//build/config:with_ffmpeg",
        "//build/config:with_sdl2",
    ]

    if (puyopuyo == "tsu") {
        sources += [
            "ac_analyzer.cc",
            "ac_analyzer.h",
        ]
    } else if (puyopuyo == "esports") {
        sources += [
            "es_analyzer.cc",
            "es_analyzer.h",
        ]
    }

    if (use_usb) {
        sources += [
            "syntek_source.cc",
            "syntek_source.h",
        ]

        deps += [
            ":usb_device",
            "//src/capture/driver",
        ]

        configs += [
            "//build/config:with_usb",
        ]
    }
}

if (use_usb) {
    static_library("usb_device") {
        sources = [
            "usb_device.cc",
            "usb_device.h",
        ]
    }

    executable("parse_capture") {
        sources = [ "parse_capture.cc" ]
        deps = [
            ":capture",
            "//src/gui",
        ]

        configs += [
            ":game_monitor",
            "//build/config:with_usb"
        ]

        if (use_v4l2) {
            sources += [
                "viddev_source.cc",
                "viddev_source.h",
            ]
            configs += [ ":use_v4l2_library" ]
        }
    }
}

executable("parse_bmp") {
    sources = [ "parse_bmp.cc" ]
    deps = [
        ":capture",
        "//src/gui",
    ]
}

if (puyopuyo == "tsu") {
    executable("parse_box") {
        sources = [ "parse_box.cc" ]
        deps = [
            ":capture",
            "//src/gui",
        ]
    }
}

executable("parse_movie") {
    sources = [ "parse_movie.cc" ]
    deps = [
        ":capture",
        "//src/gui",
    ]
    configs += [ "//build/config:with_ffmpeg" ]
}

# "capture/images.h" is not found for parse_imgs.cc

if (puyopuyo == "tsu") {
    executable("ac_analyzer_test") {
        testonly = true
        sources = [ "ac_analyzer_test.cc" ]
        deps = [
            ":capture",
            "//third_party/gtest",
            "//third_party/gtest:gtest_main",
        ]
        configs += [ "//build/config:with_sdl2" ]
    }
}

executable("color_test") {
    testonly = true
    sources = [ "color_test.cc" ]
    deps = [
        ":capture",
        "//third_party/gtest",
        "//third_party/gtest:gtest_main",
    ]
}

executable("real_color_field_test") {
    testonly = true
    sources = [ "real_color_field_test.cc" ]
    deps = [
        ":capture",
        "//third_party/gtest",
        "//third_party/gtest:gtest_main",
    ]
}

config("use_v4l2_library") {
     defines = [
         "USE_V4L2"
     ]
     ldflags = [
         "-lv4l2"
     ]
}

config("game_monitor") {
    if (is_wide_monitor_game) {
        defines = [ "WIDE_MONITOR_GAME" ]
    }
}
